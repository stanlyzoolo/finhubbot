// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 001_init.up.sql
// 002_add_table_nat_bank.up.sql

package schema


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindata001initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x8a\xc3\x30\x0c\x45\xf7\x39\xc5\x5f\xce\x40\x6f\xd0\xc3\x04\xc5\x56\x8a\x88\x6d\x15\x59\x2e\xc9\xed\x8b\xd3\x4d\x70\xbb\x11\xe8\xfd\x27\x09\x14\x8c\xc9\x19\x4e\x4b\x62\xc8\x8a\xa2\x0e\xde\xa5\x7a\x45\xd0\x9c\xd9\x82\x50\xaa\xf8\x9b\x00\x40\x22\xa4\x38\x3f\xd8\xf0\x34\xc9\x64\x07\x36\x3e\x6e\x67\xb6\x50\xd9\xe0\xbc\xfb\xa7\x6d\x35\xce\x52\xb0\x26\xa5\x0b\xd1\xe6\x57\xc4\xcd\x74\xb0\x4e\x34\x68\xd6\x96\xc1\xea\x64\x90\x82\x96\xd7\xdc\x6f\xb8\xce\x3f\xf6\x7e\xc5\xc3\x78\xec\x5f\xe8\xc5\x25\xf3\xf4\x7f\x7f\x07\x00\x00\xff\xff\x8b\x02\x5f\x1a\x18\x01\x00\x00")

func bindata001initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindata001initUpSql,
		"001_init.up.sql",
	)
}



func bindata001initUpSql() (*asset, error) {
	bytes, err := bindata001initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "001_init.up.sql",
		size: 280,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1675891836, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindata002addtablenatbankUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x0a\xc3\x30\x0c\x04\xef\x79\xc5\x1e\x5b\xe8\x0f\xfa\x98\x20\xbb\x72\x11\x71\xe4\x22\x2f\x25\xf9\x7d\x71\x43\x20\xc7\x61\x46\x68\x73\xa8\x50\x41\x49\x55\x61\x05\xde\x08\xdd\xac\xb3\xc3\x85\x73\x12\x5f\x70\x9b\x00\xc0\x5e\x30\xa7\xbe\x35\xf0\x09\x5b\x25\x76\x2c\xba\x3f\xfe\x6e\xa4\x87\x3f\x58\x52\x0a\xfd\x9a\xd0\x9a\x83\xba\xf1\xcc\x56\xbd\x60\xcf\x32\x9e\x9e\x47\xad\x14\xcb\x26\x75\x8e\xb1\xa8\xd4\x26\x9c\xee\xcf\x5f\x00\x00\x00\xff\xff\x08\x28\xa6\xd4\xa1\x00\x00\x00")

func bindata002addtablenatbankUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindata002addtablenatbankUpSql,
		"002_add_table_nat_bank.up.sql",
	)
}



func bindata002addtablenatbankUpSql() (*asset, error) {
	bytes, err := bindata002addtablenatbankUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "002_add_table_nat_bank.up.sql",
		size: 161,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1679296726, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"001_init.up.sql":               bindata001initUpSql,
	"002_add_table_nat_bank.up.sql": bindata002addtablenatbankUpSql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"001_init.up.sql": {Func: bindata001initUpSql, Children: map[string]*bintree{}},
	"002_add_table_nat_bank.up.sql": {Func: bindata002addtablenatbankUpSql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
